name: infrastructure

on:
  push:
    branches:
      - feature/**

env:
  GROUP_NAME: k-eco
  TERRAFORM_BACKEND_GROUP_NAME: k-eco-terraform
  LOCATION: eastus
  STORAGE_ACCOUNT_NAME: kecoterraform
  STORAGE_CONTAINER_NAME: terraform
  STORAGE_CONTAINER_KEY: terraform.tfstate

jobs:
  backend:
    runs-on: ubuntu-latest
    outputs:
      storage_account_key: ${{ steps.setup_terraform_backend.outputs.storage_acount_key }}
    
    steps:
      - uses: actions/checkout@v2

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: 'Azure CLI script file'
        id: setup_terraform_backend
        uses: azure/CLI@v1
        with:
          azcliversion: 2.8.0
          inlineScript: |
            chmod +x $GITHUB_WORKSPACE/infrastructure/azure/setup-terraform-backend.sh
            $GITHUB_WORKSPACE/infrastructure/azure/setup-terraform-backend.sh -g $TERRAFORM_BACKEND_GROUP_NAME -l $LOCATION --storage-account-name $STORAGE_ACCOUNT_NAME --storage-container-name $STORAGE_ACCOUNT_NAME
            KEY=$(az storage account keys list -g $TERRAFORM_BACKEND_GROUP_NAME -n $STORAGE_ACCOUNT_NAME)
            echo "::set-output name=storage_account_key::$(jq -nR "$KEY" | jq -r .[0].value)" > /dev/null 2>&1

  terraform:
    needs: backend
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    defaults:
      run:
        working-directory: ./infrastructure/terraform
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.28

      - name: 'terraform fmt'
        id: fmt
        run: terraform fmt
        continue-on-error: true
      
      - run: echo ${{ needs.backend.outputs.storage_account_key }}

      #- name: 'terraform init'
      #  id: init
      #  run: |
      #    terraform init \
      #      -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
      #      -backend-config="container_name=$STORAGE_CONTAINER_NAME" \
      #      -backend-config="key=$STORAGE_CONTAINER_KEY" \
      #      -backend-config="access_key=${{ needs.backend.outputs.storage_account_key }}"
      
      #- name: 'terraform validate'
      #  id: validate
      #  run: terraform validate -no-color
      #
      #- name: terraform Plan
      #  id: plan
      #  run: terraform plan -no-color
      #  continue-on-error: true
      #
      #- run: echo ${{ steps.plan.outputs.stdout }}
      #- run: echo ${{ steps.plan.outputs.stderr }}
      #- run: echo ${{ steps.plan.outputs.exitcode }}

      #- name: 'terraform apply'
      #  id: apply
      #  run: |
      #    terraform apply --auto-approve \
      #      -var "resource_group_name=$GROUP_NAME" \
      #      -var "location=$LOCATION"
